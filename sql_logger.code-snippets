{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //  "scope": "javascript,typescript",
  //  "prefix": "log",
  //  "body": [
  //   "console.log('$1');",
  //   "$2"
  //  ],
  //  "description": "Log output to console"
  // }
 "logger_proc" : {
  "scope" : "plsql",
  "prefix" : "logger",
  "body":[
   "procedure ${1:proc_name}("
     ,"p_param1_todo in varchar2)"
  ,"as"
     ,"\tl_scope logger_logs.scope%type := gc_scope_prefix || '${1:proc_name}';"
     ,"\tl_params logger.tab_param;"
  ,""
  ,"begin"
     ,"\tlogger.append_param(l_params, 'p_param1_todo', p_param1_todo);"
     ,"\tlogger.log('START', l_scope, null, l_params);"
  ,""
     ,"  ..."
     ,"  -- All calls to logger should pass in the scope"
     ,"  ..."
  ,""
     ,"\tlogger.log('END', l_scope);"
  ,"exception"
     ,"when no_data_found then"
  ,"  logger.log_error('Unhandled Exception.'||SQLERRM||' '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, l_scope, null, l_params);"
  ,"  raise;"
  ,"end ${1:proc_name};"
   ]
   ,"description": "procedure definition"
 }
 ,"logger_log" : {
    "scope" : "plsql"
   ,"prefix" : "logger"
   ,"body":[ "logger.log('$1', l_scope);"]
   ,"description": "single line"
 }

 ,"logger_log_val" : {
   "scope" : "plsql"
  ,"prefix" : "logger"
  ,"body":[ "logger.log('$1'||$1, l_scope);"]
  ,"description": "value"
 }

 ,"logger_scope" : {
   "scope" : "plsql"
  ,"prefix" : "logger"
  ,"body":[ "gc_scope_prefix constant varchar2(31) := lower(\\$\\$plsql_unit) || '.';"]
  ,"description": "scope prefix"
 }

 ,"logger_start" : {
   "scope" : "plsql"
  ,"prefix" : "logger"
  ,"body":[ "logger.append_param(l_params, '${1:param_name}', $1);"
           ,"logger.append_param(l_params, '${2:param_name}', $2);"
           ,"logger.log('START', l_scope, null, l_params);"]
  ,"description": "start lines"
 }

 ,"logger_updated_rows" : {
   "scope" : "plsql"
  ,"prefix" : "logger"
  ,"body":[ "logger.log(sql%rowcount||' ${1:param_name}', l_scope);"]
  ,"description": "updated rows"
 }

 ,"logger_updated_end" : {
   "scope" : "plsql"
  ,"prefix" : "logger"
  ,"body":[ "logger.log('END: '||sql%rowcount||' updated', l_scope);"]
  ,"description": "updated end"
 }

 ,"logger_variables" : {
   "scope" : "plsql"
  ,"prefix" : "logger"
  ,"body":[   "\tl_scope logger_logs.scope%type := gc_scope_prefix || '${1:proc_name}';"
             ,"\tl_params logger.tab_param;"
 ]
  ,"description": "variables"
 }

 ,"logger_exception" : {
  "scope" : "plsql"
 ,"prefix" : "logger"
 ,"body":[   "logger.log_error('Unhandled Exception.'||SQLERRM||' '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, l_scope, null, l_params);"
]
 ,"description": "Exception"
}

 ,"apex_url" : {
   "scope" : "plsql"
  ,"prefix" : "apex"
  ,"body":[   "f?p=&APP_ID:&APP_PAGE_ID:&SESSION.:&REQUEST.:&DEBUG.::::"
             ,"f?p=App:Page:Session:Request:Debug:ClearCache:itemNames:itemValues:PrinterFriendly"
 ]
  ,"description": "APEX URL"
 }

 }
